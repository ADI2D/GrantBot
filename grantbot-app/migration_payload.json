{"query": "-- Enable UUID generation\ncreate extension if not exists \"pgcrypto\";\n\n-- Organizations\ncreate table if not exists public.organizations (\n  id uuid primary key default gen_random_uuid(),\n  name text not null,\n  mission text,\n  impact_summary text,\n  differentiator text,\n  annual_budget numeric,\n  onboarding_completion numeric default 0,\n  document_metadata jsonb default '[]'::jsonb,\n  created_by uuid references auth.users(id) on delete set null,\n  created_at timestamptz default now()\n);\n\n-- Organization members\ncreate table if not exists public.org_members (\n  id bigserial primary key,\n  organization_id uuid references public.organizations(id) on delete cascade,\n  user_id uuid references auth.users(id) on delete cascade,\n  role text default 'member',\n  created_at timestamptz default now(),\n  unique(organization_id, user_id)\n);\n\n-- Opportunities curated/imported per org\ncreate table if not exists public.opportunities (\n  id uuid primary key default gen_random_uuid(),\n  organization_id uuid references public.organizations(id) on delete cascade,\n  name text not null,\n  focus_area text,\n  amount numeric,\n  deadline date,\n  alignment_score numeric,\n  status text default 'recommended',\n  compliance_notes text,\n  created_at timestamptz default now()\n);\n\n-- Proposals tracked inside workspace\ncreate table if not exists public.proposals (\n  id uuid primary key default gen_random_uuid(),\n  organization_id uuid references public.organizations(id) on delete cascade,\n  opportunity_id uuid references public.opportunities(id) on delete set null,\n  owner_name text,\n  status text default 'drafting',\n  progress integer default 0,\n  due_date date,\n  checklist_status text default 'in_progress',\n  confidence numeric,\n  autosave_enabled boolean default true,\n  compliance_summary jsonb default '[]'::jsonb,\n  created_at timestamptz default now(),\n  updated_at timestamptz default now()\n);\n\n-- Proposal sections for the AI workspace\ncreate table if not exists public.proposal_sections (\n  id uuid primary key default gen_random_uuid(),\n  proposal_id uuid references public.proposals(id) on delete cascade,\n  title text not null,\n  token_count integer default 0,\n  content text,\n  updated_at timestamptz default now()\n);\n\n-- Outcomes + learnings per submission\ncreate table if not exists public.outcomes (\n  id uuid primary key default gen_random_uuid(),\n  organization_id uuid references public.organizations(id) on delete cascade,\n  proposal_id uuid references public.proposals(id) on delete set null,\n  status text check (status in ('submitted','funded','lost')),\n  award_amount numeric default 0,\n  learning_insight text,\n  recorded_at timestamptz default now()\n);\n\n-- Basic indexes\ncreate index if not exists idx_opportunities_org on public.opportunities(organization_id);\ncreate index if not exists idx_proposals_org on public.proposals(organization_id);\ncreate index if not exists idx_outcomes_org on public.outcomes(organization_id);\ncreate index if not exists idx_proposal_sections_proposal on public.proposal_sections(proposal_id);\n\n-- Enable RLS\nalter table public.organizations enable row level security;\nalter table public.org_members enable row level security;\nalter table public.opportunities enable row level security;\nalter table public.proposals enable row level security;\nalter table public.proposal_sections enable row level security;\nalter table public.outcomes enable row level security;\n\n-- Policies\ncreate policy \"members can read org\"\n  on public.organizations for select\n  using (exists (\n    select 1 from public.org_members m\n    where m.organization_id = organizations.id\n      and m.user_id = auth.uid()\n  ));\n\ncreate policy \"members manage opportunities\"\n  on public.opportunities for all\n  using (exists (\n    select 1 from public.org_members m\n    where m.organization_id = opportunities.organization_id\n      and m.user_id = auth.uid()\n  )) with check (exists (\n    select 1 from public.org_members m\n    where m.organization_id = opportunities.organization_id\n      and m.user_id = auth.uid()\n  ));\n\ncreate policy \"members manage proposals\"\n  on public.proposals for all\n  using (exists (\n    select 1 from public.org_members m\n    where m.organization_id = proposals.organization_id\n      and m.user_id = auth.uid()\n  )) with check (exists (\n    select 1 from public.org_members m\n    where m.organization_id = proposals.organization_id\n      and m.user_id = auth.uid()\n  ));\n\ncreate policy \"members read proposal sections\"\n  on public.proposal_sections for select\n  using (exists (\n    select 1 from public.proposals p\n    join public.org_members m on m.organization_id = p.organization_id\n    where p.id = proposal_sections.proposal_id\n      and m.user_id = auth.uid()\n  ));\n\ncreate policy \"members read opportunities\"\n  on public.opportunities for select\n  using (exists (\n    select 1 from public.org_members m\n    where m.organization_id = opportunities.organization_id\n      and m.user_id = auth.uid()\n  ));\n\ncreate policy \"members read outcomes\"\n  on public.outcomes for select\n  using (exists (\n    select 1 from public.org_members m\n    where m.organization_id = outcomes.organization_id\n      and m.user_id = auth.uid()\n  ));\n\ncreate policy \"members manage outcomes\"\n  on public.outcomes for insert\n  with check (exists (\n    select 1 from public.org_members m\n    where m.organization_id = outcomes.organization_id\n      and m.user_id = auth.uid()\n  ));\n\ncreate policy \"members manage proposal sections\"\n  on public.proposal_sections for all\n  using (exists (\n    select 1 from public.proposals p\n    join public.org_members m on m.organization_id = p.organization_id\n    where p.id = proposal_sections.proposal_id\n      and m.user_id = auth.uid()\n  )) with check (exists (\n    select 1 from public.proposals p\n    join public.org_members m on m.organization_id = p.organization_id\n    where p.id = proposal_sections.proposal_id\n      and m.user_id = auth.uid()\n  ));\n"}