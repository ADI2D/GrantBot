import { jsPDF } from "jspdf";

type ProposalSection = {
  title: string;
  content: string | null;
};

type ProposalData = {
  organizationName: string;
  opportunityName: string;
  sections: ProposalSection[];
  metadata?: {
    createdAt?: string;
    ownerName?: string;
    status?: string;
  };
};

export function generateProposalPDF(proposal: ProposalData): Blob {
  const doc = new jsPDF({
    orientation: "portrait",
    unit: "pt",
    format: "letter",
  });

  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 60;
  const maxLineWidth = pageWidth - margin * 2;
  let yPosition = margin;

  // Helper function to add text with word wrapping
  const addText = (
    text: string,
    fontSize: number,
    fontStyle: "normal" | "bold" | "italic" = "normal",
    align: "left" | "center" | "right" = "left"
  ) => {
    doc.setFontSize(fontSize);
    doc.setFont("helvetica", fontStyle);

    const lines = doc.splitTextToSize(text, maxLineWidth);

    for (let i = 0; i < lines.length; i++) {
      // Check if we need a new page
      if (yPosition + fontSize * 1.5 > pageHeight - margin) {
        doc.addPage();
        yPosition = margin;
      }

      if (align === "center") {
        doc.text(lines[i], pageWidth / 2, yPosition, { align: "center" });
      } else if (align === "right") {
        doc.text(lines[i], pageWidth - margin, yPosition, { align: "right" });
      } else {
        doc.text(lines[i], margin, yPosition);
      }

      yPosition += fontSize * 1.5;
    }
  };

  const addSpace = (points: number) => {
    yPosition += points;
  };

  const addLine = () => {
    doc.setLineWidth(0.5);
    doc.setDrawColor(200, 200, 200);
    doc.line(margin, yPosition, pageWidth - margin, yPosition);
    yPosition += 20;
  };

  // Header
  addText(proposal.organizationName, 24, "bold", "center");
  addSpace(10);
  addText("Grant Proposal", 14, "normal", "center");
  addSpace(5);
  addText(proposal.opportunityName, 16, "bold", "center");
  addSpace(20);
  addLine();

  // Metadata
  if (proposal.metadata) {
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(100, 100, 100);

    if (proposal.metadata.createdAt) {
      const date = new Date(proposal.metadata.createdAt).toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      });
      addText(`Date: ${date}`, 10);
    }

    if (proposal.metadata.ownerName) {
      addText(`Prepared by: ${proposal.metadata.ownerName}`, 10);
    }

    if (proposal.metadata.status) {
      addText(`Status: ${proposal.metadata.status}`, 10);
    }

    doc.setTextColor(0, 0, 0);
    addSpace(20);
  }

  // Sections
  for (const section of proposal.sections) {
    // Check if we need a new page for section header
    if (yPosition + 80 > pageHeight - margin) {
      doc.addPage();
      yPosition = margin;
    }

    // Section title
    addSpace(10);
    doc.setFillColor(41, 98, 255); // Blue background
    doc.rect(margin - 10, yPosition - 15, maxLineWidth + 20, 30, "F");
    doc.setTextColor(255, 255, 255);
    addText(section.title, 16, "bold");
    doc.setTextColor(0, 0, 0);
    addSpace(10);

    // Section content
    if (section.content && section.content.trim()) {
      const paragraphs = section.content.split("\n\n");
      for (const paragraph of paragraphs) {
        if (paragraph.trim()) {
          addText(paragraph.trim(), 11, "normal");
          addSpace(10);
        }
      }
    } else {
      doc.setTextColor(150, 150, 150);
      addText("[Content pending]", 11, "italic");
      doc.setTextColor(0, 0, 0);
    }

    addSpace(20);
  }

  // Footer on each page
  const totalPages = doc.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    doc.setFontSize(9);
    doc.setTextColor(150, 150, 150);
    doc.text(
      `Generated by GrantBot â€¢ Page ${i} of ${totalPages}`,
      pageWidth / 2,
      pageHeight - 30,
      { align: "center" }
    );
  }

  return doc.output("blob");
}

export function downloadPDF(blob: Blob, filename: string) {
  const url = URL.createObjectURL(blob);
  const link = document.createElement("a");
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}
